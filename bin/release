#!/usr/bin/env bash

# Paths
ROOT_DIR=$(realpath $(dirname "$BASH_SOURCE")/..)
BUILD_DIR="$ROOT_DIR/build"

main() {
  cmd="$1"
  shift

  if [[ "$cmd" == "build" ]]; then
    build "$@"
  elif [[ "$cmd" == "push" ]]; then
    push "$@"
  elif [[ "$cmd" == "status" ]]; then
    status "$@"
  else
    exit_error "IDK what to do with: $1"
  fi
}

use_dir() {
  if [[ -z "$1" ]]; then
    exit_error "Gimme a build dir" 
  fi

  pushd "$1" || exit_error "No build directory: $1"

  PLAT=""
  if [[ "$PWD" =~ /win/ ]]; then
    PLAT="win"
  elif [[ "$PWD" =~ /mac/ ]]; then
    PLAT="mac"
  elif [[ "$PWD" =~ /linux/ ]]; then
    PLAT="linux"
  else
    exit_error "Couldn't figure out which platform to build."
  fi
}

build() {
  use_dir "$1"
  cp "$BUILD_DIR"/patched.main.js ./main.js
  cp "$BUILD_DIR"/icon.png ./icon.png
  electron-builder
}

push() {
  use_dir "$1"

  bundle="./dist/$PLAT"
  if [[ "$PLAT" == 'win' ]]; then
    bundle="./dist/win-unpacked"
  elif [[ "$PLAT" == 'linux' ]]; then
    bundle="./dist/Unbound-0.1.0.AppImage"
  fi

  if [[ ! -e "$bundle" ]]; then
    exit_error "No bundle directory: $bundle"
  fi
  
  butler_target=$(cat "$BUILD_DIR"/$PLAT/BUTLER_TARGET.txt)
  if [[ ! "$butler_target" =~ 'unbound' ]]; then
    exit_error "Invalid butler target: $butler_target"
  fi

  echo "Doing butler."
  butler push "$bundle" "$butler_target"
}

status() {
  butler_target=$(cat "$BUILD_DIR"/$PLAT/BUTLER_TARGET.txt)
  if [[ ! "$butler_target" =~ 'unbound' ]]; then
    exit_error "Invalid butler target: $butler_target"
  fi

  butler status "$butler_target"
}

exit_error() {
  echo "Error: $@" 1>&2
  exit 1
}

main "$@"